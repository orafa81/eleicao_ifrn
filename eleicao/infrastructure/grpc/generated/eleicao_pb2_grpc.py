# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from infrastructure.grpc.generated import eleicao_pb2 as eleicao__pb2

GRPC_GENERATED_VERSION = '1.73.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in eleicao_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class EleicaoServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetEleicao = channel.unary_unary(
                '/eleicao.EleicaoService/GetEleicao',
                request_serializer=eleicao__pb2.EleicaoRequest.SerializeToString,
                response_deserializer=eleicao__pb2.EleicaoResponse.FromString,
                _registered_method=True)
        self.CreateEleicao = channel.unary_unary(
                '/eleicao.EleicaoService/CreateEleicao',
                request_serializer=eleicao__pb2.CreateEleicaoRequest.SerializeToString,
                response_deserializer=eleicao__pb2.CreateEleicaoResponse.FromString,
                _registered_method=True)
        self.EditEleicao = channel.unary_unary(
                '/eleicao.EleicaoService/EditEleicao',
                request_serializer=eleicao__pb2.EditEleicaoRequest.SerializeToString,
                response_deserializer=eleicao__pb2.EditEleicaoResponse.FromString,
                _registered_method=True)
        self.DeleteEleicao = channel.unary_unary(
                '/eleicao.EleicaoService/DeleteEleicao',
                request_serializer=eleicao__pb2.DeleteEleicaoRequest.SerializeToString,
                response_deserializer=eleicao__pb2.DeleteEleicaoResponse.FromString,
                _registered_method=True)
        self.ListEleicoes = channel.unary_unary(
                '/eleicao.EleicaoService/ListEleicoes',
                request_serializer=eleicao__pb2.ListEleicoesRequest.SerializeToString,
                response_deserializer=eleicao__pb2.ListEleicoesResponse.FromString,
                _registered_method=True)


class EleicaoServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetEleicao(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateEleicao(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EditEleicao(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteEleicao(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListEleicoes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EleicaoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetEleicao': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEleicao,
                    request_deserializer=eleicao__pb2.EleicaoRequest.FromString,
                    response_serializer=eleicao__pb2.EleicaoResponse.SerializeToString,
            ),
            'CreateEleicao': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateEleicao,
                    request_deserializer=eleicao__pb2.CreateEleicaoRequest.FromString,
                    response_serializer=eleicao__pb2.CreateEleicaoResponse.SerializeToString,
            ),
            'EditEleicao': grpc.unary_unary_rpc_method_handler(
                    servicer.EditEleicao,
                    request_deserializer=eleicao__pb2.EditEleicaoRequest.FromString,
                    response_serializer=eleicao__pb2.EditEleicaoResponse.SerializeToString,
            ),
            'DeleteEleicao': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteEleicao,
                    request_deserializer=eleicao__pb2.DeleteEleicaoRequest.FromString,
                    response_serializer=eleicao__pb2.DeleteEleicaoResponse.SerializeToString,
            ),
            'ListEleicoes': grpc.unary_unary_rpc_method_handler(
                    servicer.ListEleicoes,
                    request_deserializer=eleicao__pb2.ListEleicoesRequest.FromString,
                    response_serializer=eleicao__pb2.ListEleicoesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'eleicao.EleicaoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('eleicao.EleicaoService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class EleicaoService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetEleicao(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/eleicao.EleicaoService/GetEleicao',
            eleicao__pb2.EleicaoRequest.SerializeToString,
            eleicao__pb2.EleicaoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateEleicao(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/eleicao.EleicaoService/CreateEleicao',
            eleicao__pb2.CreateEleicaoRequest.SerializeToString,
            eleicao__pb2.CreateEleicaoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EditEleicao(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/eleicao.EleicaoService/EditEleicao',
            eleicao__pb2.EditEleicaoRequest.SerializeToString,
            eleicao__pb2.EditEleicaoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteEleicao(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/eleicao.EleicaoService/DeleteEleicao',
            eleicao__pb2.DeleteEleicaoRequest.SerializeToString,
            eleicao__pb2.DeleteEleicaoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListEleicoes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/eleicao.EleicaoService/ListEleicoes',
            eleicao__pb2.ListEleicoesRequest.SerializeToString,
            eleicao__pb2.ListEleicoesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
